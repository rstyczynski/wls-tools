#!wlst

def usage():
    sys.stdout.write("""Usage: wlst.sh osb_alert_dump.wlst [--admin= --port=]|--url= --help --count= --interval= --dir= osb= --safety-lag=

, where
    --count.........number of dumps. dafault 288 to cover 24 with 5 minutes interval
    --interval......interval between dumps. default 300 seconds i.e. 5 minutes
    --safety-lag....distance from current time to avid race conditions. default 5 seconds

    --dir...........output directory. default /tmp

    --osb...........osb server name to get data from. default: osb_server1

    --admin..........Admin server name used during WLST connect operation. default: AdminServer
    --port...........TCP port used to connect to Admin server. default: 7001
    --url............user specified URL. Will be used as provided

    --help...........this help
    #
    """)

import datetime
from datetime import datetime
import calendar
import time as pytime

import os


wlst = True

DATname='CUSTOM/com.bea.wli.monitoring.pipeline.alert'

def dump_osb_alerts(count=1, interval=0):
    initial_count = count
    startAt = calendar.timegm(pytime.gmtime()) - interval
    while count >0:
        try:
            #
            if wlst:
                connect(url=admin_url, adminServerName=admin_name)
            #
            #
            current_timestmap = calendar.timegm(pytime.gmtime())
            endAt = current_timestmap - safety_lag
            #
            dateISO=datetime.fromtimestamp(endAt).isoformat().split('T')[0]
            timeISO=datetime.fromtimestamp(endAt).isoformat().split('T')[1]
            #
            print "Exporting to " + dst_dir + "/osb_alert." + dateISO + "T" + timeISO + ".xml"
            print "  server          : " + server_name
            print "  safety lag      : " + safety_lag        
            print "  current time    : " + str(current_timestmap) + ", " + str(datetime.fromtimestamp(current_timestmap))
            print "  from            : " + str(startAt) + ", " + str(datetime.fromtimestamp(startAt))
            print "  to              : " + str(endAt) + ", " + str(datetime.fromtimestamp(endAt))
            print "  collection no.  : " + str(initial_count - count)
            print "  max. collections: " + str(initial_count)
            #
            export_start = calendar.timegm(pytime.gmtime())

            if wlst:
                exportDiagnosticDataFromServer(logicalName=DATname, 
                exportFileName=dst_dir + "/osb_alert." + dateISO + "T" + timeISO + ".xml", 
                server=server_name, 
                beginTimestamp=PyLong(startAt * 1000L), endTimestamp= PyLong(endAt * 1000L))
            else:
                time.sleep(6)
            #
            export_stop = calendar.timegm(pytime.gmtime())
            #
            export_delay = export_stop - export_start
            #
            print "---"
            print "Export delay   : " + str(export_delay)
            print "---"

            wait_time = interval - export_delay
            if wait_time < 0:
                wait_time = 0
            #
            print "Waiting " + str(wait_time) + " seconds ..."
            #
            if wlst:
                java.lang.Thread.sleep(wait_time * 1000)
            else:
                time.sleep(wait_time)
            #
            startAt = endAt - safety_lag
            #
            count = count - 1
            #
            if wlst:
                disconnect()
        except Exception as e:
            print "ERROR. Error running alert export. Cause:" + str(e)
            print "Sleeping for 60 seconds, and will try again."
            time.sleep(60)

dst_dir='/tmp'
server_name='osb_server1'
admin_name='AdminServer'
admin_port = 7001

safety_lag = 5  # program takes older messages to avoid message loosing or overlapping

count = 288 # 24 hours with 
interval = 300 # 5 miutes interval


try:
    opts, args = getopt.getopt( sys.argv[1:], 'a:p:u:hc:i:d:o:s:', ['admin=','port=','url=', 'help', 'count=', 'interval=', 'dir=', 'osb=', 'safety_lag=' ] )
except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)
	
for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage()
        sys.exit(2)
    elif opt in ('-a', '--admin'):
        admin_name = arg
    elif opt in ('-p', '--port'):
        admin_port = arg
        admin_url = admin_protocol + "://" + admin_address + ":" + str(admin_port)
    elif opt in ('-u', '--url'):
        admin_url = arg
    elif opt in ('-d', '--dir'):
        dst_dir = arg
    elif opt in ('-o', '--osb'):
        server_name = arg
    elif opt in ('-c', '--count'):
        count = int(arg)
    elif opt in ('-i', '--interval'):
        interval = int(arg)
    elif opt in ('-s', '--safety_lag'):
        safety_lag = int(arg)
    else:
        usage()
        sys.exit(2)

dump_osb_alerts(count, interval)
